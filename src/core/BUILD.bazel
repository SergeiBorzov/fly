load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "types",
    hdrs = [
        "types.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "platform",
    hdrs = [
        "platform.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "assert",
    hdrs = [
        "assert.h",
    ],
    srcs = [
        "assert.cpp",
    ],
    deps = [
        ":types",
        ":platform",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "memory",
    hdrs = [
        "memory.h",
        "arena.h",
    ],
    srcs = [
        "arena.cpp",
        "memory.cpp",
    ] + select({
        "@platforms//os:osx": ["memory_osx.cpp"],
        "@platforms//os:windows": ["memory_windows.cpp"],
        "@platforms//os:linux": ["memory_linux.cpp"],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":assert",
        "@mimalloc//:mimalloc",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "thread_context",
    hdrs = [
        "thread_context.h",
    ],
    srcs = select({
        "@platforms//os:windows": ["thread_context_windows.cpp"],
        "@platforms//os:linux": ["thread_context_linux.cpp"],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":memory",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "hash",
    hdrs = [
        "hash.h",
    ],
    srcs = [
        "hash.cpp",
    ],
    deps = [
        ":assert",
        "@xxhash//:xxhash",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "hash_trie",
    hdrs = [
        "hash_trie.h",
    ],
    deps = [
        "hash",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "hash_set",
    hdrs = [
        "hash_set.h",
    ],
    deps = [
        "hash",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "string8",
    hdrs = [
        "string8.h",
    ],
    srcs = [
        "string8.cpp",
    ],
    deps = [
        ":hash",
        ":memory",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "filesystem",
    hdrs = [
        "filesystem.h",
    ],
    srcs = select({
        "@platforms//os:windows": ["filesystem_windows.cpp"],
        "@platforms//os:linux": ["filesystem_linux.cpp"],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":string8",
        ":thread_context",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "log",
    hdrs = [
        "log.h",
    ],
    srcs = [
        "log.cpp",
    ],
    deps = [
        ":assert",
    ],
    copts = select({
        "@platforms//os:linux": ["-Wno-format-overflow"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

cc_library(
    name = "clock",
    hdrs = [
        "clock.h",
    ],
    srcs = select({
        "@platforms//os:osx": ["clock_osx.cpp"],
        "@platforms//os:windows": ["clock_windows.cpp"],
        "@platforms//os:linux": ["clock_linux.cpp"],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":types",
        ":platform",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "core",
    deps = [
        ":filesystem",
        ":log",
        ":clock",
        ":thread_context",
    ],
    visibility = ["//visibility:public"],
)
