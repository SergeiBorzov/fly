#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_arithmetic : require
#include "common.glsl"

#define SCALE 100

layout(local_size_x = 256) in;

layout(push_constant) uniform PushConstants
{
    uint skyviewMapIndex;
    uint averageLuminanceBufferIndex;
    uint skyviewMapWidth;
    uint skyviewMapHeight;
}
gPushConstants;

shared int localAverageLuminanceR;
shared int localAverageLuminanceG;
shared int localAverageLuminanceB;

FLY_REGISTER_STORAGE_BUFFER(, AverageLuminance, {
    ivec3 luminance;
    int pad;
})
FLY_REGISTER_STORAGE_TEXTURE_BUFFER(readonly, RGBA16FTextures, image2D, rgba16f)

void main()
{
    uint gid = gl_GlobalInvocationID.x;

    if (gid == 0)
    {
        FLY_ACCESS_STORAGE_BUFFER(AverageLuminance,
                                  gPushConstants.averageLuminanceBufferIndex)
        [0].luminance = ivec3(0);
    }
    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        localAverageLuminanceR = 0;
        localAverageLuminanceG = 0;
        localAverageLuminanceB = 0;
    }

    vec3 radiance =
        imageLoad(FLY_ACCESS_STORAGE_TEXTURE_BUFFER(
                      RGBA16FTextures, gPushConstants.skyviewMapIndex),
                  ivec2(gid, gPushConstants.skyviewMapHeight / 2))
            .rgb;

    ivec3 contribution =
        ivec3((radiance / gPushConstants.skyviewMapWidth) * SCALE);
    ivec3 subgroupContribution = subgroupAdd(contribution);
    if (subgroupElect())
    {
        atomicAdd(localAverageLuminanceR, subgroupContribution.r);
        atomicAdd(localAverageLuminanceG, subgroupContribution.g);
        atomicAdd(localAverageLuminanceB, subgroupContribution.b);
    }
    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        atomicAdd(
            FLY_ACCESS_STORAGE_BUFFER(
                AverageLuminance, gPushConstants.averageLuminanceBufferIndex)[0]
                .luminance.r,
            localAverageLuminanceR);
        atomicAdd(
            FLY_ACCESS_STORAGE_BUFFER(
                AverageLuminance, gPushConstants.averageLuminanceBufferIndex)[0]
                .luminance.g,
            localAverageLuminanceG);
        atomicAdd(
            FLY_ACCESS_STORAGE_BUFFER(
                AverageLuminance, gPushConstants.averageLuminanceBufferIndex)[0]
                .luminance.b,
            localAverageLuminanceB);
    }
}
