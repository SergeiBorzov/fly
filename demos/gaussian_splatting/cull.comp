#version 460
#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

#include "radix_sort_common.glsl"

layout(local_size_x = COUNT_WORKGROUP_SIZE) in;

layout(push_constant) uniform PushConstants
{
    uint cameraBufferIndex;
    uint splatBufferIndex;
    uint pingPongBufferIndex;
    uint indirectDrawCountBufferIndex;
    uint splatCount;
}
gPushConstants;

FLY_REGISTER_UNIFORM_BUFFER(Camera, {
    mat4 projection;
    mat4 view;
    vec4 viewport;
    vec4 cameraParameters;
    vec4 time;
})

FLY_REGISTER_STORAGE_BUFFER(readonly, Splat, {
    vec4 rotation;
    vec3 position;
    float r;
    vec3 scale;
    float g;
    float b;
    float a;
    float pad[2];
})

FLY_REGISTER_STORAGE_BUFFER(writeonly, Keys, {
    uint key;
    uint value;
})

layout(set = 0,
       binding = FLY_STORAGE_BUFFER_BINDING_INDEX) writeonly buffer DrawCount
{
    uint count;
}
gDrawCountBuffers[];

uint floatKey(float f)
{
    uint x = floatBitsToUint(f);
    uint key = bool(x & 0x80000000) ? x ^ 0xFFFFFFFF : x ^ 0x80000000;
    return key;
}

void main()
{
    uint gtid = gl_GlobalInvocationID.x;

    mat4 view = FLY_ACCESS_UNIFORM_BUFFER(
        Camera, gPushConstants.cameraBufferIndex, view);

    if (gtid >= gPushConstants.splatCount)
    {
        return;
    }

    if (gtid == 0)
    {
        gDrawCountBuffers[gPushConstants.indirectDrawCountBufferIndex].count =
            0;
    }
    barrier();

    vec4 cameraParameters = FLY_ACCESS_UNIFORM_BUFFER(
        Camera, gPushConstants.cameraBufferIndex, cameraParameters);

    Splat splat =
        FLY_ACCESS_STORAGE_BUFFER(Splat, gPushConstants.splatBufferIndex)[gtid];

    vec4 splatPositionVS = view * vec4(splat.position, 1.0);
    float radius = max(max(splat.scale.x, splat.scale.y), splat.scale.z);

    bool visible = splatPositionVS.z + radius > cameraParameters.z &&
                   splatPositionVS.z - radius < cameraParameters.w;
    visible = visible && splatPositionVS.z * cameraParameters.x + radius -
                                 abs(splatPositionVS.x) >
                             0;
    visible = visible && splatPositionVS.z * cameraParameters.y + radius -
                                 abs(splatPositionVS.y) >
                             0;
    if (visible)
    {
        uint drawIndex = atomicAdd(
            gDrawCountBuffers[gPushConstants.indirectDrawCountBufferIndex]
                .count,
            1);
        FLY_ACCESS_STORAGE_BUFFER(Keys, gPushConstants.pingPongBufferIndex)
        [drawIndex] = Keys(floatKey(-splatPositionVS.z), gtid);
    }
}
