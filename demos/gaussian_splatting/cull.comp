#version 460
#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

#include "radix_sort_common.glsl"

layout(local_size_x = COUNT_WORKGROUP_SIZE) in;

layout(push_constant) uniform PushConstants
{
    uint cameraBufferIndex;
    uint splatBufferIndex;
    uint pingPongBufferIndex;
    uint splatCount;
}
gPushConstants;

HLS_REGISTER_UNIFORM_BUFFER(Camera, {
    mat4 projection;
    mat4 view;
    float hTanX;
    float hTanY;
    float near;
    float far;
})

HLS_REGISTER_STORAGE_BUFFER(readonly, Splat, {
    vec4 rotation;
    vec3 position;
    float r;
    vec3 scale;
    float g;
    float b;
    float a;
    float pad[2];
})

HLS_REGISTER_STORAGE_BUFFER(writeonly, Keys, {
    uint key;
    uint value;
})

uint floatKey(float f)
{
    uint x = floatBitsToUint(f);
    uint key = bool(x & 0x80000000) ? x ^ 0xFFFFFFFF : x ^ 0x80000000;
    return key;
}

void main()
{
    uint gtid = gl_GlobalInvocationID.x;

    mat4 view = HLS_ACCESS_UNIFORM_BUFFER(
        Camera, gPushConstants.cameraBufferIndex, view);

    if (gtid >= gPushConstants.splatCount)
    {
        return;
    }

    vec3 splatPositionWS =
        HLS_ACCESS_STORAGE_BUFFER(Splat, gPushConstants.splatBufferIndex)[gtid]
            .position;
    vec4 splatPositionCS = view * vec4(splatPositionWS, 1.0);

    HLS_ACCESS_STORAGE_BUFFER(Keys, gPushConstants.pingPongBufferIndex)
    [gtid] = Keys(floatKey(-splatPositionCS.z), gtid);
}
