#version 460
#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

#include "radix_sort_common.glsl"

#define N SCAN_WORKGROUP_SIZE * 2
layout(local_size_x = SCAN_WORKGROUP_SIZE) in;

layout(push_constant) uniform PushConstants
{
    uint pass;
    uint keyCount;
    uint keyBufferIndex;
    uint tileHistogramBufferIndex;
    uint globalHistogramBufferIndex;
}
gPushConstants;

FLY_REGISTER_STORAGE_BUFFER(readonly, Keys, { uint key; })
FLY_REGISTER_STORAGE_BUFFER(readonly, GlobalHistogram, { uint count; })
FLY_REGISTER_STORAGE_BUFFER(, TileHistograms, { uint count; })

shared uint tmp[N];
void main()
{
    uint tid = gl_LocalInvocationIndex;
    uint digit = gl_WorkGroupID.x;
    uint histogramCount =
        (gPushConstants.keyCount + COUNT_TILE_SIZE - 1) / COUNT_TILE_SIZE;
    uint globalHistogramStart = RADIX_HISTOGRAM_SIZE * gPushConstants.pass;

    uint globalOffset = 0;
    for (uint i = 0; i < digit; i++)
    {
        globalOffset +=
            FLY_ACCESS_STORAGE_BUFFER(
                GlobalHistogram,
                gPushConstants
                    .globalHistogramBufferIndex)[globalHistogramStart + i]
                .count;
    }

    uint reduction = 0;
    for (uint j = 0; j < histogramCount; j += N)
    {
        uint offset = 1;
        uint a = RADIX_HISTOGRAM_SIZE * (j + 2 * tid) + digit;
        uint b = RADIX_HISTOGRAM_SIZE * (j + 2 * tid + 1) + digit;
        uint sa = 2 * tid;
        uint sb = 2 * tid + 1;

        tmp[sa] = (j + sa < histogramCount)
                      ? FLY_ACCESS_STORAGE_BUFFER(
                            TileHistograms,
                            gPushConstants.tileHistogramBufferIndex)[a]
                            .count
                      : 0;

        tmp[sb] = (j + sb < histogramCount)
                      ? FLY_ACCESS_STORAGE_BUFFER(
                            TileHistograms,
                            gPushConstants.tileHistogramBufferIndex)[b]
                            .count
                      : 0;
        barrier();

        for (uint i = N >> 1; i > 0; i >>= 1)
        {
            if (tid < i)
            {
                uint l = offset * (2 * tid + 1) - 1;
                uint r = offset * (2 * tid + 2) - 1;
                tmp[r] += tmp[l];
            }
            offset <<= 1;
            barrier();
        }

        uint sum = tmp[N - 1];
        barrier();
        
        if (tid == 0)
        {
            tmp[N - 1] = 0;
        }
        barrier();

        for (uint i = 1; i < N; i <<= 1)
        {
            offset >>= 1;
            if (tid < i)
            {
                uint l = offset * (2 * tid + 1) - 1;
                uint r = offset * (2 * tid + 2) - 1;
                uint t = tmp[l];
                tmp[l] = tmp[r];
                tmp[r] += t;
            }
            barrier();
        }

        if (j + sa < histogramCount)
        {
            FLY_ACCESS_STORAGE_BUFFER(TileHistograms,
                                      gPushConstants.tileHistogramBufferIndex)
            [a].count = tmp[sa] + reduction + globalOffset;
        }

        if (j + sb < histogramCount)
        {
            FLY_ACCESS_STORAGE_BUFFER(TileHistograms,
                                      gPushConstants.tileHistogramBufferIndex)
            [b].count = tmp[sb] + reduction + globalOffset;
        }

        reduction += sum;
    }

    return;
}
