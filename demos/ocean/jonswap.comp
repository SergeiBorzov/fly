#version 460
#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

#define G (9.81f)
#define PI (3.14159265f)

layout(local_size_x = 256) in;

layout(push_constant) uniform PushConstants
{
    uint dataBufferIndex;
    uint uniformBufferIndex;
}
gPushConstants;

FLY_REGISTER_UNIFORM_BUFFER(UniformData, {
    vec4 fetchSpeedDirSpread;
    vec4 timeScale;
    vec4 domain;
})

FLY_REGISTER_STORAGE_BUFFER(writeonly, Data, {
    vec2 value;
    vec2 displacement;
    vec2 dx;
    vec2 dy;
})

float Hash(vec2 n, float seed)
{
    return fract(sin(dot(n + seed, vec2(12.9898, 78.233))) * 43758.5453);
}

// Box-Muller transform using two hashed values
float GaussianHash(vec2 n, float seed)
{
    float u1 = Hash(n, seed);
    float u2 = Hash(n, seed + 1.0);
    float r = sqrt(-2.0 * log(max(u1, 1e-6)));
    float theta = 2.0 * PI * u2;
    return r * cos(theta);
}

float Jonswap(float w, float fetch, float windSpeed)
{
    const float y = 3.3;
    const float wp = 22.0f * pow((windSpeed * fetch) / (G * G), -0.33f);
    const float sigma = w > wp ? 0.09f : 0.07f;
    const float alpha =
        0.076f * pow((G * fetch) / (windSpeed * windSpeed), -0.22f);
    const float r = exp(-((w - wp) * (w - wp)) / (2 * sigma * sigma * wp * wp));

    return ((alpha * G * G) / pow(w, 5.0f)) *
           exp(-(5.0f / 4.0f) * pow(wp / w, 4.0f)) * pow(y, r);
}

// Quartic approx for normalization factor for cosine-2s spread function
float NormalizationFactor(float s)
{
    if (s < 5)
    {
        return (((-0.000564f * s + 0.00776f) * s - 0.044f) * s + 0.192f) * s +
               0.163f;
    }
    else
    {
        return ((((-4.80e-8f) * s + 1.07e-5f) * s - 9.53e-4f) * s + 0.059f) *
                   s +
               0.393f;
    }
}

float Cosine2s(float theta, float theta0, float s)
{
    float delta = 0.5f * (theta - theta0);
    return NormalizationFactor(s) * pow(abs(cos(delta)), 2 * s);
}

void main()
{
    int c = int(gl_LocalInvocationID.x);
    int r = int(gl_WorkGroupID.x);
    int base = r * int(gl_WorkGroupSize.x);

    vec4 fetchSpeedDirSpread = FLY_ACCESS_UNIFORM_BUFFER(
        UniformData, gPushConstants.uniformBufferIndex, fetchSpeedDirSpread);
    vec4 timeScale = FLY_ACCESS_UNIFORM_BUFFER(
        UniformData, gPushConstants.uniformBufferIndex, timeScale);
    vec4 domain = FLY_ACCESS_UNIFORM_BUFFER(
        UniformData, gPushConstants.uniformBufferIndex, domain);

    float deltaK = 2 * PI / domain.x;
    int width = int(gl_WorkGroupSize.x);
    int halfN = width / 2;
    float kx = (c < halfN) ? c : c - width;
    float ky = (r < halfN) ? r : r - width;
    vec2 k = vec2(kx, ky) * deltaK;
    float theta = atan(k.y, k.x);
    float kl = max(length(k), 1e-6);
    float omega = sqrt(G * kl);

    float phase = omega * timeScale.x;
    float cosPhase = cos(phase);
    float sinPhase = sin(phase);

    float j2d = Cosine2s(theta, fetchSpeedDirSpread.z, fetchSpeedDirSpread.w) *
                Jonswap(omega, fetchSpeedDirSpread.x, fetchSpeedDirSpread.y) *
                (0.5 * sqrt(G / kl)) / kl;

    vec2 w =
        vec2(GaussianHash(vec2(c, r), 0.0f), GaussianHash(vec2(c, r), 1.0f)) /
        sqrt(2);
    float a = sqrt(2.0f * j2d * deltaK * deltaK) * sqrt(timeScale.y);

    float x = cosPhase * w.x - sinPhase * w.y;
    float y = sinPhase * w.x + cosPhase * w.y;

    vec2 dx = vec2(-kx * y, kx * x);
    vec2 dy = vec2(-ky * y, ky * x);
    vec2 displacement = vec2(dx.x, dy.x) / kl;

    Data data = Data(a * vec2(x, y), a * displacement, a * dx, a * dy);
    FLY_ACCESS_STORAGE_BUFFER(Data, gPushConstants.dataBufferIndex)
    [base + c] = data;
}
