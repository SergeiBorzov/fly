load("@rules_cc//cc:defs.bzl", "cc_library", "cc_binary")
load("@fly//scripts/bazel/rules:copy_files_to_directory.bzl", "copy_files_to_directory")
load("@fly//scripts/bazel/rules:glslang.bzl", "glsl_shader")

copy_files_to_directory(
    name = "copy_vulkan_validation_layer",
    srcs = [
        "@vulkan_validation_layers//:VK_LAYER_KHRONOS_validation_json",
        "@vulkan_validation_layers//:VK_LAYER_KHRONOS_validation",
    ],
    output_directory = ".",
)

config_setting(
    name = "release_build",
    values = {
        "compilation_mode": "opt",
    },
)

glsl_shader(
    name = "transpose.comp.spv",
    src = "transpose.comp",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

glsl_shader(
    name = "ifft.comp.spv",
    src = "ifft.comp",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

glsl_shader(
    name = "jonswap.comp.spv",
    src = "jonswap.comp",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

glsl_shader(
    name = "copy.comp.spv",
    src = "copy.comp",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

glsl_shader(
    name = "ocean.vert.spv",
    src = "ocean.vert",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

glsl_shader(
    name = "ocean.frag.spv",
    src = "ocean.frag",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

glsl_shader(
    name = "screen_quad.vert.spv",
    src = "screen_quad.vert",
)

glsl_shader(
    name = "skybox.frag.spv",
    src = "skybox.frag",
)

glsl_shader(
    name = "sky.frag.spv",
    src = "sky.frag",
    deps = [
        "//demos/common:glsl_bindless",
    ],
)

cc_library(
    name = "lib",
    hdrs = [
        "cascades.h",
        "skybox_renderer.h",
        "ocean_renderer.h"
    ],
    srcs = [
        "cascades.cpp",
        "skybox_renderer.cpp",
        "ocean_renderer.cpp",
    ],
    deps = [
        "//src/rhi:context",
        "//src/math:math",
        "//demos/common:scene",
        "//demos/common:simple_camera_fps",
    ],
)

cc_binary(
    name = "app",
    srcs = [
        "main.cpp",
    ],
    deps = [
        ":lib",
        "@imgui//:imgui",
    ],
    data = [
        ":screen_quad.vert.spv",
        ":sky.frag.spv",
        ":skybox.frag.spv",
        ":ocean.vert.spv",
        ":ocean.frag.spv",
        ":copy.comp.spv",
        ":transpose.comp.spv",
        ":ifft.comp.spv",
        ":jonswap.comp.spv",
    ] + select({
        ":release_build": [
        ],
        "//conditions:default": [
            ":copy_vulkan_validation_layer",
        ],
    }),
)

