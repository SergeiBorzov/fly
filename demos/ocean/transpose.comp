#version 460
#extension GL_GOOGLE_include_directive : require
#include "bindless.glsl"

// Note: Good article
// https://developer.nvidia.com/blog/efficient-matrix-transpose-cuda-cc/

// Changed workgroup size from 32x8 to 16x16 to avoid bank conflicts on vec2
// shared array
#define TILE_DIM 16
layout(local_size_x = TILE_DIM, local_size_y = TILE_DIM) in;

layout(push_constant) uniform PushConstants
{
    uint inBufferIndex;
    uint outBufferIndex;
    uint width;
}
gPushConstants;

struct Data
{
    vec2 value;
    vec2 displacement;
    vec2 dx;
    vec2 dy;
    vec2 dxDisplacement;
    vec2 dyDisplacement;
};

layout(set = 0, binding = FLY_STORAGE_BUFFER_BINDING_INDEX) readonly buffer In
{
    Data items[];
}
gInBuffers[];

layout(set = 0, binding = FLY_STORAGE_BUFFER_BINDING_INDEX) writeonly buffer Out
{
    Data items[];
}
gOutBuffers[];

shared vec2 tile[TILE_DIM][TILE_DIM + 1];
shared vec2 displacementTile[TILE_DIM][TILE_DIM + 1];
shared vec2 dxTile[TILE_DIM][TILE_DIM + 1];
shared vec2 dyTile[TILE_DIM][TILE_DIM + 1];
shared vec2 dxDisplacementTile[TILE_DIM][TILE_DIM + 1];
shared vec2 dyDisplacementTile[TILE_DIM][TILE_DIM + 1];
void main()
{
    uvec2 tid = gl_LocalInvocationID.xy;
    uint x = gl_WorkGroupID.x * TILE_DIM + tid.x;
    uint y = gl_WorkGroupID.y * TILE_DIM + tid.y;
    uint width = gPushConstants.width;

    Data data = gInBuffers[gPushConstants.inBufferIndex].items[y * width + x];
    tile[tid.y][tid.x] = data.value;
    displacementTile[tid.y][tid.x] = data.displacement;
    dxTile[tid.y][tid.x] = data.dx;
    dyTile[tid.y][tid.x] = data.dy;
    dxDisplacementTile[tid.y][tid.x] = data.dxDisplacement;
    dyDisplacementTile[tid.y][tid.x] = data.dyDisplacement;

    barrier();

    x = gl_WorkGroupID.y * TILE_DIM + tid.x;
    y = gl_WorkGroupID.x * TILE_DIM + tid.y;

    gOutBuffers[gPushConstants.outBufferIndex].items[y * width + x] = Data(
        tile[tid.x][tid.y], displacementTile[tid.x][tid.y],
        dxTile[tid.x][tid.y], dyTile[tid.x][tid.y],
        dxDisplacementTile[tid.x][tid.y], dyDisplacementTile[tid.x][tid.y]);
}
