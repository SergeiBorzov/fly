#version 450
#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

#define MAX_LOD_COUNT 8

layout(local_size_x = 256) in;

layout(push_constant) uniform PushConstants
{
    uint cameraBufferIndex;
    uint instanceBufferIndex;
    uint meshDataBufferIndex;
    uint drawCommandBufferIndex;
    uint drawCountBufferIndex;
    uint instanceCount;
    uint screenWidth;
}
gPushConstants;

FLY_REGISTER_UNIFORM_BUFFER(Camera, {
    mat4 projection;
    mat4 view;
})

FLY_REGISTER_STORAGE_BUFFER(writeonly, DrawCommand, {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
})

FLY_REGISTER_STORAGE_BUFFER(readonly, MeshData, {
    vec3 sphereCenter;
    float sphereRadius;
    uint lodCount;
})

FLY_REGISTER_STORAGE_BUFFER(readonly, MeshInstance, {
    vec3 position;
    float pad;
})

layout(set = 0,
       binding = FLY_STORAGE_BUFFER_BINDING_INDEX) writeonly buffer DrawCount
{
    uint count;
}
gDrawCountBuffers[];

const float sizes[MAX_LOD_COUNT] = {
    0.5f, 0.25f, 0.125f, 0.0625f, 0.03125f, 0.015625f, 0.0078125f, 0.00390625};
const float lodFactor = 1.0f;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= gPushConstants.instanceCount)
    {
        return;
    }

    if (index < 8)
    {
        FLY_ACCESS_STORAGE_BUFFER(DrawCommand,
                                  gPushConstants.drawCommandBufferIndex)
        [index].instanceCount = 0;
    }
    barrier();

    if (index == 0)
    {
        gDrawCountBuffers[gPushConstants.drawCountBufferIndex].count = 8;
    }
    barrier();

    // Only dragon mesh in the scene
    MeshData meshData = FLY_ACCESS_STORAGE_BUFFER(
        MeshData, gPushConstants.meshDataBufferIndex)[0];

    mat4 projection = FLY_ACCESS_UNIFORM_BUFFER(
        Camera, gPushConstants.cameraBufferIndex, projection);
    mat4 view = FLY_ACCESS_UNIFORM_BUFFER(
        Camera, gPushConstants.cameraBufferIndex, view);
    vec3 translation =
        FLY_ACCESS_STORAGE_BUFFER(MeshInstance,
                                  gPushConstants.instanceBufferIndex)[index]
            .position;
    vec4 positionVS = view * vec4(meshData.sphereCenter + translation, 1.0f);
    float dist = max(-positionVS.z - meshData.sphereRadius, 0.001f);

    float invHalfTanFovHorizontal = projection[0][0];
    float sizeRelativeToScreen =
        (meshData.sphereRadius / dist) * invHalfTanFovHorizontal;

    uint lodIndex = 0;
    for (uint i = 0; i < 8; i++)
    {
        if (sizeRelativeToScreen < sizes[i])
        {
            lodIndex = i;
        }
    }

    const bool visible = true; // No culling yet :)
    if (visible)
    {
        atomicAdd(
            FLY_ACCESS_STORAGE_BUFFER(
                DrawCommand, gPushConstants.drawCommandBufferIndex)[lodIndex]
                .instanceCount,
            1);
    }
    barrier();
}
