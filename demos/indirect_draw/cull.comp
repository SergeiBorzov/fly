#version 460

#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

layout(local_size_x = 64) in;

layout(push_constant) uniform Indices
{
    uint drawDataBufferIndex;
    uint drawCommandBufferIndex;
    uint drawCountBufferIndex;
    uint maxDrawCount;
}
gIndices;

HLS_REGISTER_STORAGE_BUFFER(readonly, DrawData, {
    uint indexCount;
    uint firstIndex;
    uint vertexBufferIndex;
    uint materialIndex;
})

HLS_REGISTER_STORAGE_BUFFER(writeonly, DrawCommand, {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
    uint vertexBufferIndex;
    uint materialIndex;
})

layout(set = 0,
       binding = HLS_STORAGE_BUFFER_BINDING_INDEX) writeonly buffer DrawCount
{
    uint count;
}
gDrawCountBuffers[];

layout(set = 0)

    void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= gIndices.maxDrawCount)
    {
        return;
    }

    uint drawIndex =
        atomicAdd(gDrawCountBuffers[gIndices.drawCountBufferIndex].count, 1);

    DrawData d = HLS_ACCESS_STORAGE_BUFFER(DrawData,
                                           gIndices.drawDataBufferIndex)[index];
    HLS_ACCESS_STORAGE_BUFFER(DrawCommand, gIndices.drawCommandBufferIndex)
    [drawIndex] = DrawCommand(d.indexCount, 1, d.firstIndex, 0, 0,
                              d.vertexBufferIndex, d.materialIndex);
}
