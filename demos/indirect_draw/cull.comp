#version 460

#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

layout(local_size_x = 64) in;

layout(push_constant) uniform Indices
{
    mat4 view;
    uint instanceDataBufferIndex;
    uint meshDataBufferIndex;
    uint boundingSphereDrawBufferIndex;
    uint drawCommandBufferIndex;
    uint drawCountBufferIndex;
    uint maxDrawCount;
    float htanx;
    float htany;
    float near;
    float far;
}
gIndices;

HLS_REGISTER_STORAGE_BUFFER(readonly, InstanceData, {
    mat4 model;
    uint meshDataIndex;
    uint pad[3];
})

HLS_REGISTER_STORAGE_BUFFER(readonly, MeshData, {
    uint materialIndex;
    uint vertexBufferIndex;
    uint boundingSphereDrawIndex;
})

HLS_REGISTER_STORAGE_BUFFER(readonly, BoundingSphereDraw, {
    vec3 center;
    float radius;
    uint indexCount;
    uint indexOffset;
})

HLS_REGISTER_STORAGE_BUFFER(writeonly, DrawCommand, {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
})

layout(set = 0,
       binding = HLS_STORAGE_BUFFER_BINDING_INDEX) writeonly buffer DrawCount
{
    uint count;
}
gDrawCountBuffers[];

void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= gIndices.maxDrawCount)
    {
        return;
    }

    InstanceData instance = HLS_ACCESS_STORAGE_BUFFER(
        InstanceData, gIndices.instanceDataBufferIndex)[index];
    MeshData meshData = HLS_ACCESS_STORAGE_BUFFER(
        MeshData, gIndices.meshDataBufferIndex)[instance.meshDataIndex];
    BoundingSphereDraw sphereDraw = HLS_ACCESS_STORAGE_BUFFER(
        BoundingSphereDraw,
        gIndices
            .boundingSphereDrawBufferIndex)[meshData.boundingSphereDrawIndex];

    vec4 centerVS =
        gIndices.view * instance.model * vec4(sphereDraw.center, 1.0f);

    bool visible = centerVS.z + sphereDraw.radius > gIndices.near &&
                   centerVS.z - sphereDraw.radius < gIndices.far;
    visible = visible && centerVS.z * gIndices.htanx + sphereDraw.radius - abs(centerVS.x) > 0;
    visible = visible && centerVS.z * gIndices.htany + sphereDraw.radius - abs(centerVS.y) > 0;

    if (visible)
    {
        uint drawIndex = atomicAdd(
            gDrawCountBuffers[gIndices.drawCountBufferIndex].count, 1);
        HLS_ACCESS_STORAGE_BUFFER(DrawCommand, gIndices.drawCommandBufferIndex)
        [drawIndex] = DrawCommand(sphereDraw.indexCount, 1,
                                  sphereDraw.indexOffset, 0, index);
    }
}
