#version 460

#extension GL_GOOGLE_include_directive : enable
#include "bindless.glsl"

layout(local_size_x = 64) in;

layout(push_constant) uniform Indices
{
    uint instanceDataBufferIndex;
    uint meshDataBufferIndex;
    uint cameraBufferIndex;
    uint boundingSphereDrawBufferIndex;
    uint drawCommandBufferIndex;
    uint drawCountBufferIndex;
    uint maxDrawCount;
}
gIndices;

FLY_REGISTER_UNIFORM_BUFFER(Camera, {
    mat4 projection;
    mat4 view;
    mat4 cullView;
    float hTanX;
    float hTanY;
    float near;
    float far;
})

FLY_REGISTER_STORAGE_BUFFER(readonly, InstanceData, {
    mat4 model;
    uint meshDataIndex;
    uint pad[3];
})

FLY_REGISTER_STORAGE_BUFFER(readonly, MeshData, {
    uint materialIndex;
    uint vertexBufferIndex;
    uint boundingSphereDrawIndex;
})

FLY_REGISTER_STORAGE_BUFFER(readonly, BoundingSphereDraw, {
    vec3 center;
    float radius;
    uint indexCount;
    uint indexOffset;
})

FLY_REGISTER_STORAGE_BUFFER(writeonly, DrawCommand, {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    uint vertexOffset;
    uint firstInstance;
})

layout(set = 0,
       binding = FLY_STORAGE_BUFFER_BINDING_INDEX) writeonly buffer DrawCount
{
    uint count;
}
gDrawCountBuffers[];

void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= gIndices.maxDrawCount)
    {
        return;
    }

    mat4 cullView =
        FLY_ACCESS_UNIFORM_BUFFER(Camera, gIndices.cameraBufferIndex, cullView);
    float hTanX =
        FLY_ACCESS_UNIFORM_BUFFER(Camera, gIndices.cameraBufferIndex, hTanX);
    float hTanY =
        FLY_ACCESS_UNIFORM_BUFFER(Camera, gIndices.cameraBufferIndex, hTanY);
    float near =
        FLY_ACCESS_UNIFORM_BUFFER(Camera, gIndices.cameraBufferIndex, near);
    float far =
        FLY_ACCESS_UNIFORM_BUFFER(Camera, gIndices.cameraBufferIndex, far);

    InstanceData instance = FLY_ACCESS_STORAGE_BUFFER(
        InstanceData, gIndices.instanceDataBufferIndex)[index];
    MeshData meshData = FLY_ACCESS_STORAGE_BUFFER(
        MeshData, gIndices.meshDataBufferIndex)[instance.meshDataIndex];
    BoundingSphereDraw sphereDraw = FLY_ACCESS_STORAGE_BUFFER(
        BoundingSphereDraw,
        gIndices
            .boundingSphereDrawBufferIndex)[meshData.boundingSphereDrawIndex];

    vec4 centerVS = cullView * instance.model * vec4(sphereDraw.center, 1.0f);

    bool visible = centerVS.z + sphereDraw.radius > near &&
                   centerVS.z - sphereDraw.radius < far;
    visible =
        visible && centerVS.z * hTanX + sphereDraw.radius - abs(centerVS.x) > 0;
    visible =
        visible && centerVS.z * hTanY + sphereDraw.radius - abs(centerVS.y) > 0;

    if (visible)
    {
        uint drawIndex = atomicAdd(
            gDrawCountBuffers[gIndices.drawCountBufferIndex].count, 1);
        FLY_ACCESS_STORAGE_BUFFER(DrawCommand, gIndices.drawCommandBufferIndex)
        [drawIndex] = DrawCommand(sphereDraw.indexCount, 1,
                                  sphereDraw.indexOffset, 0, index);
    }
}
